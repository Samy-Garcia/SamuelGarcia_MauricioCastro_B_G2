@PutMapping("/editarUsuario/{id}")//URL
public ResponseEntity<?> editarEmpresa(
        @PathVariable Long id,
        @Valid @RequestBody UsuarioDTO json,
        BindingResult bindingResult

){

    if(bindingResult.hasErrors()) {
        //2. Crear un mapa de errores (campo-> mensaje
        Map<String, String> errores = new HashMap<>();
        //3. Interar sobre cada error y lo agrega al objeto Map
        bindingResult.getFieldErrors().forEach(error -> errores.put(error.getField(), error.getDefaultMessage()));
        //4. Retornar error HTTP 400 (Bad Request con los errores de validacion
        return ResponseEntity.badRequest().body(errores);
    }

    try {
        // Intentar actualizar la empresa llamando al servicio
        UsuarioDTO dto = acceso.actualizarDatos(id, json);
        return ResponseEntity.ok(dto);

    } catch (ExceptionUsuarioNoEncontrado e) {
        return ResponseEntity.notFound().build();

    } catch (ExceptionEmpresaDuplicada e) {
        return ResponseEntity.status(HttpStatus.CONFLICT).body(Map.of(
                "Error", "Datos duplicados",
                "Campo", e.getCampoDuplicado()
        ));
    }
}



